// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Vladroon22/TestTask-Bank-Operation/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// GetLastTxs mocks base method.
func (m *MockServicer) GetLastTxs(c context.Context, userID int) ([]entity.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTxs", c, userID)
	ret0, _ := ret[0].([]entity.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTxs indicates an expected call of GetLastTxs.
func (mr *MockServicerMockRecorder) GetLastTxs(c, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTxs", reflect.TypeOf((*MockServicer)(nil).GetLastTxs), c, userID)
}

// IncreaseUserBalance mocks base method.
func (m *MockServicer) IncreaseUserBalance(c context.Context, userID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseUserBalance", c, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseUserBalance indicates an expected call of IncreaseUserBalance.
func (mr *MockServicerMockRecorder) IncreaseUserBalance(c, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseUserBalance", reflect.TypeOf((*MockServicer)(nil).IncreaseUserBalance), c, userID, amount)
}

// TransferMoney mocks base method.
func (m *MockServicer) TransferMoney(c context.Context, userFrom, userTo string, fromUserID, toUserID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMoney", c, userFrom, userTo, fromUserID, toUserID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferMoney indicates an expected call of TransferMoney.
func (mr *MockServicerMockRecorder) TransferMoney(c, userFrom, userTo, fromUserID, toUserID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMoney", reflect.TypeOf((*MockServicer)(nil).TransferMoney), c, userFrom, userTo, fromUserID, toUserID, amount)
}
